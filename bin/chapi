case $1 in
  "flow")
    git pull
    file_version=""
    if [ -e ${PWD##*/}.php ]; then
      file_version="${PWD##*/}.php"
    else
      if [ -e .version ]; then
        file_version=".version"
      fi
    fi

    case $2 in
      "release"|"-r") # end nivel 2
        case $3 in
          "start"|"-s")     #end nivel 3
            branch_count=$(git branch --list CHAPI* | wc -l)
            if [ $branch_count -eq 0 ]; then
              release=$(git branch | grep "RELEASE\/" | sed 's/*//g' | sed 's/ //g')
              if [ -z $release ]; then
                if [ "$USER" != "root" ]; then
                  if [ -d "wp-content-mu-plugins" ]; then
                    
                    #wordpress_version=$(grep "\$wp_version = " wp-core/wp-includes/version.php | sed 's/;//' | sed "s/'//g" | awk '{print $3}')
                    repo_version=$(grep "Version:" ${file_version} | sed 's/ //g' | awk '{print $1}')
                    version_only_number=$(echo $repo_version | sed 's/Version://g' | sed 's/ //g')
                    
                    if [[ $(git status --porcelain) ]]; then
                      git stash
                    fi

                    git checkout develop
                    git checkout -b "RELEASE/${version_only_number}"
                    
                    git checkout -b "CROLFIX/genetate-requirements"
                    
                    
                    
                    rm -f release/plugins.json release/plugins-inactive.json release/themes.json
                    docker-compose -f docker-compose-wpcli.yml run wordpress-cli-util wp plugin list --status=active --format=json > release/plugins.json
                    docker-compose -f docker-compose-wpcli.yml run wordpress-cli-util wp plugin list --status=inactive --format=json > release/plugins-inactive.json
                    docker-compose -f docker-compose-wpcli.yml run wordpress-cli-util wp theme list --format=json > release/themes.json
                    
                    docker-compose -f docker-compose-wpcli.yml down

                    docker-compose -f docker-compose-python.yml run python python /release/prepare.py

                    docker-compose -f docker-compose-python.yml down

                    git add .
                    git commit -m "Generate-requiremets-of-${version_only_number}"
                    #git tag -a $version_only_number -m "${version_only_number}"
                    #git checkout develop
                    git checkout "RELEASE/${version_only_number}"
                    git merge "CROLFIX/genetate-requirements"
                    git push -u origin "RELEASE/${version_only_number}"
                    git branch -d "CROLFIX/genetate-requirements"
                    


                    #-------------------- BITACORTA -------------------
                    
                    
                    # current_date=$(date)
                    # echo -e "------------------------- ${current_date} --------------------------------------" >> release/.bitacora
                    # echo -e "PosChapin $repo_version" >> release/.bitacora
                    # echo -e "WordPress Version $wordpress_version" >> release/.bitacora
                    # #echo -e "PLUGINS" >> release/.bitacora
                    # #cat release/plugins.json >> release/.bitacora
                    # #echo -e "\n" >> release/.bitacora
                    # #echo -e "THEMES" >> release/.bitacora
                    # #cat release/themes.json >> release/.bitacora
                    # echo -e "\n" >> release/.bitacora
                    # echo -e "************************** ${current_date} *************************************" >> release/.bitacora
                    
                  else
                    repo_version=$(grep "Version:" ${file_version} | sed 's/ //g' | awk '{print $1}')
                    version_only_number=$(echo $repo_version | sed 's/Version://g' | sed 's/ //g')

                    git checkout develop
                    git checkout -b "RELEASE/${version_only_number}"
                    git push -u origin "RELEASE/${version_only_number}"
                  fi
                else
                  echo "please exit the root"
                fi
              else
                echo "WARNING: There is already a release"
              fi
            else
              echo "WARNING: there are features pending merge develop"
              git branch --list CHAPI*
            fi
            ;;
          "finish"|"-f") # end nivel 3
            if [ "$USER" != "root" ]; then
              repo_version=$(grep "Version:" ${file_version} | sed 's/ //g' | awk '{print $1}')
              version_only_number=$(echo $repo_version | sed 's/Version://g' | sed 's/ //g')
              
              release=$(git branch | grep "RELEASE\/" | sed 's/*//g' | sed 's/ //g')
              if [[ $release ]]; then
                git checkout "${release}"
                git tag -a $version_only_number -m "${version_only_number}"

                mergeched_release="MERGECHED-${release}"
                git branch -m $release $mergeched_release
                git branch -d $release # delete local branch
                git push origin -d $release # delete remote branch
                git checkout $mergeched_release
                git push origin $mergeched_release
                #git checkout develop
                #git merge $mergeched_release
                #git push -u origin develop
                
                git checkout develop
                git merge "${mergeched_release}"
                git push -u origin develop
                git checkout main
                git merge "${mergeched_release}"
                git push -u origin main

                # Eliminar mergeched cuando se finalize el release
                git push origin -d $(git branch -a --list MERGECHED*)
                git branch -d $(git branch --list MERGECHED*)
                
                
              else
                echo "no release branch found"
              fi

            else
              echo "please exit the root"
            fi
            
            
            ;;
          "delete"|"-d")
            release=$(git branch | grep "RELEASE\/" | sed 's/*//g' | sed 's/ //g')
            if [[ $release ]]; then
              git checkout develop
              git branch -d "${release}" # delete branch local
              git push origin -d $release # delete branch remote
            fi
            
            ;;
        esac
        
         
        ;;
      "feature"|"-f") # end nivel 2
        case $3 in
          "start"|"-s") # en nivel 3
            if [ "$USER" != "root" ]; then
              release=$(git branch | grep "RELEASE\/" | sed 's/*//g' | sed 's/ //g')
              if [ -z $release ]; then
                prompt=$4
                contador_curl=$(curl https://api.countapi.xyz/hit/poschapin.com/YoYYm0RLM4Du0B737x5P)
                contador=$(echo $contador_curl | sed 's/{//g' | sed 's/}//g' | sed 's/value//g' | sed 's/ //g' | sed 's/://g' | sed 's/"//g')        
                texto=$(echo $prompt | sed 's/"//g' | sed 's/ /-/g')
                
                # verify is changes exist create to stash the changes
                if [[ $(git status --porcelain) ]]; then
                  git stash
                fi
                
                git checkout develop
                git checkout -b "CHAPI-${contador}/${texto}"
                git push --set-upstream origin "CHAPI-${contador}/${texto}"
                echo -e "CHAPI-${contador}/${texto} :: new branch created"
              else
                echo "WARNING: A feature cannot be created because a ${release} exists"
              fi
            else
              echo "please exit the root"
            fi      
            ;;
          "finish"|"-f") #$3
            prompt=$4
            if [ $prompt ]; then
              feature=$(git branch | grep "CHAPI-${prompt}" | sed 's/*//g' | sed 's/ //g')
              if [ $feature ]; then
                git checkout $feature
                if [[ $(git status --porcelain) ]]; then
                  echo -e "************************ WARNING *************************************"
                  echo -e "********* The change is active please commits in ${feature} **********"
                  echo -e "**********************************************************************"
                else
                  new_feature="MERGECHED-${feature}"
                  git branch -m $feature $new_feature
                  git branch -d $feature # delete local branch
                  git push origin -d $feature # delete remote branch
                  git checkout $new_feature
                  git push origin $new_feature
                  git checkout develop
                  git merge $new_feature
                  git push -u origin develop
                fi
              else
                echo "WARNING: not found branch named feature chapi"
              fi
            else
              echo "WARNING: Please insert prompt of feature, example CHAPI-#number prompt is number"
            fi
            ;;
          "delete"|"-d")
            prompt=$4
            feature=$(git branch | grep "CHAPI-${prompt}" | sed 's/*//g' | sed 's/ //g')
            git push origin -d $feature
            git checkout develop
            git branch -d $feature
            ;;
        esac
        ;;
      "bugfix"|"-b"|"-bf") # end nivel 2
        case $3 in
          "start"|"-s") # en nivel 3
            if [ "$USER" != "root" ]; then
              release=$(git branch | grep "RELEASE\/" | sed 's/*//g' | sed 's/ //g')
              if [ $release ]; then
                prompt=$4
                contador_curl=$(curl https://api.countapi.xyz/hit/poschapin.com/YoYYm0RLM4Du0B737x5P)
                contador=$(echo $contador_curl | sed 's/{//g' | sed 's/}//g' | sed 's/value//g' | sed 's/ //g' | sed 's/://g' | sed 's/"//g')        
                texto=$(echo $prompt | sed 's/"//g' | sed 's/ /-/g')
                
                # verify is changes exist create to stash the changes
                if [[ $(git status --porcelain) ]]; then
                  git stash
                fi
                
                git checkout $release
                branch_name="BUGFIX-${contador}/${texto}"
                git checkout -b $branch_name
                git push --set-upstream origin $branch_name
                echo -e "${branch_name} :: new branch created"
              else
                echo "WARNING: A bugfix cannot be created because a not exists a release"
              fi
            else
              echo "please exit the root"
            fi
            ;;
          "finish"|"-f") # en nivel 3
            prompt=$4
            if [ $prompt ]; then
              release=$(git branch | grep "RELEASE\/" | sed 's/*//g' | sed 's/ //g')
              bugfix=$(git branch | grep "BUGFIX-${prompt}" | sed 's/*//g' | sed 's/ //g')
              if [ $bugfix ]; then
                git checkout $bugfix
                if [[ $(git status --porcelain) ]]; then
                  echo -e "************************ WARNING *************************************"
                  echo -e "********* The change is active please commits in ${bugfix} **********"
                  echo -e "**********************************************************************"
                else
                  new_bugfix="MERGECHED-${bugfix}"
                  git branch -m $bugfix $new_bugfix
                  git branch -d $bugfix # delete local branch
                  git push origin -d $bugfix # delete remote branch
                  git checkout $new_bugfix
                  git push origin $new_bugfix
                  git checkout $release
                  git merge $new_bugfix
                  git push -u origin $release
                fi
              else
                echo "WARNING: not found branch named bugfix"
              fi
            else
              echo "WARNING: Please insert prompt of feature, example CHAPI-#number prompt is number"
            fi
            ;;   
          "delete"|"-d") # en nivel 3
            prompt=$4
            release=$(git branch | grep "RELEASE\/" | sed 's/*//g' | sed 's/ //g')
            bugfix=$(git branch | grep "BUGFIX-${prompt}" | sed 's/*//g' | sed 's/ //g')
            git push origin -d $bugfix
            git checkout $release
            git branch -d $bugfix
            ;;      
        esac
        ;;
      "hotfix"|"-h"|"-hf") # end nivel 2
        case $3 in
          "start"|"-s") # en nivel 3
            if [ "$USER" != "root" ]; then
              main=$(git branch | grep "main" | sed 's/*//g' | sed 's/ //g')
              if [ $main ]; then
                prompt=$4
                contador_curl=$(curl https://api.countapi.xyz/hit/poschapin.com/YoYYm0RLM4Du0B737x5P)
                contador=$(echo $contador_curl | sed 's/{//g' | sed 's/}//g' | sed 's/value//g' | sed 's/ //g' | sed 's/://g' | sed 's/"//g')        
                texto=$(echo $prompt | sed 's/"//g' | sed 's/ /-/g')
                
                # verify is changes exist create to stash the changes
                if [[ $(git status --porcelain) ]]; then
                  git stash
                fi
                
                git checkout $main
                branch_name="HOTFIX-${contador}/${texto}"
                git checkout -b $branch_name
                git push --set-upstream origin $branch_name
                echo -e "${branch_name} :: new branch created"
              else
                echo "WARNING: A bugfix cannot be created because a not exists a main"
              fi
            else
              echo "please exit the root"
            fi
            ;;
          "finish"|"-f") # en nivel 3
            prompt=$4
            if [ $prompt ]; then
              main=$(git branch | grep "main" | sed 's/*//g' | sed 's/ //g')
              hotfix=$(git branch | grep "HOTFIX-${prompt}" | sed 's/*//g' | sed 's/ //g')
              if [ $hotfix ]; then
                git checkout $hotfix
                if [[ $(git status --porcelain) ]]; then
                  echo -e "************************ WARNING *************************************"
                  echo -e "********* The change is active please commits in ${hotfix} **********"
                  echo -e "**********************************************************************"
                else
                  new_hotfix="MERGECHED-${hotfix}"
                  git branch -m $hotfix $new_hotfix
                  git branch -d $hotfix # delete local branch
                  git push origin -d $hotfix # delete remote branch
                  git checkout $new_hotfix
                  git push origin $new_hotfix
                  git checkout $main
                  git merge $new_hotfix
                  git push -u origin $main
                  git checkout develop
                  git merge $main
                  git push -u origin develop
                fi
              else
                echo "WARNING: not found branch named bugfix"
              fi
            else
              echo "WARNING: Please insert prompt of feature, example CHAPI-#number prompt is number"
            fi
            ;;   
          "delete"|"-d") # en nivel 3
            prompt=$4
            main=$(git branch | grep "main" | sed 's/*//g' | sed 's/ //g')
            hotfix=$(git branch | grep "HOTFIX-${prompt}" | sed 's/*//g' | sed 's/ //g')
            git push origin -d $hotfix
            git checkout $main
            git branch -d $hotfix
            ;;      
        esac
        ;;
      "new-stage"|"-ns")
        repo_version=$(grep "Version:" ${file_version} | sed 's/ //g' | awk '{print $1}')
        version_only_number=$(echo $repo_version | sed 's/Version://g' | sed 's/ //g')
        refstags=$(git ls-remote --tags | grep "${version_only_number}" | awk '{print $2}')
        if [ $refstags ]; then
          git checkout main
          git checkout -b "CROLFIX/change-new-version"
              
          #change new version
          this_month=$(date +%m)
          this_year=$(date +%y)
          current_version=$version_only_number
          IFS='.' read -r year month n <<< "$current_version"
          [ $this_month -ne $month ] && year=$this_year && month=$this_month && n=0 || let n++
          new_version="$year.$month.$n"
          sed -i "s/Version:.*/Version: ${new_version}/g" ${file_version}

          git add .
          git commit -m "Was created new version ${new_version}"
          git checkout main
          git merge "CROLFIX/change-new-version"
          git push -u origin main
          git branch -d "CROLFIX/change-new-version" # delete branch local

          git checkout develop
          git merge main
          git push -u origin develop
          
        else
          echo "WARNING: Plese create new release of version ${version_only_number} in github"
        fi
        ;;
      "status"|"-st")
        repo_version=$(grep "Version:" ${file_version} | sed 's/ //g' | awk '{print $1}')
        version_only_number=$(echo $repo_version | sed 's/Version://g' | sed 's/ //g')
        refstags=$(git ls-remote --tags | grep "${version_only_number}" | awk '{print $2}')
        if [ $refstags ]; then
          echo "Status: The next stage can now be created"
        else
          branch_remote_chapi_count=$(git branch -r --list origin/CHAPI* | wc -l)
          branch_local_chapi_count=$(git branch --list CHAPI* | wc -l)
          if [ $branch_local_chapi_count -gt 0 ] || [ $branch_local_chapi_count -gt 0 ]; then
            echo "Status: please finalize open [CHAPI] features"
          else
            release=$(git branch | grep "RELEASE\/" | sed 's/*//g' | sed 's/ //g')
            if [ $release ]; then
              echo "Status: please finalize the active release"
            else
              echo "Status: A release can now be created of version ${version_only_number} in github"
            fi
            
          fi
          
        fi
        ;;
    esac
    ;;
  "--version"|"-v"|"--v")
    repo_version=$(grep "Version:[0-9 ][0-9]*\.[0-9][0-9]*.*" /usr/local/etc/chapi.d/.version | sed 's/[ #]//g' | awk '{print $1}')
    echo "Chapi $repo_version"
    ;;
  "uninstall"|"-ui")
    sh /usr/local/etc/chapi.d/uninstall.sh
    ;;
  "list"|"ls")
    case $2 in
      "check"|"-ck")
        folders=$(find -name ".git" -type d | sed 's/\.git//g' | sed 's/\.\///g')
        for folder in $folders; do
            cd $folder
            branch_remote_chapi_count=$(git branch -r --list origin/CHAPI* | wc -l)
            branch_remote_mergeched_count=$(git branch -r --list origin/MERGECHED* | wc -l)
            branch_local_chapi_count=$(git branch --list CHAPI* | wc -l)
            branch_local_mergeched_count=$(git branch --list MERGECHED* | wc -l)
            if [ $branch_local_chapi_count -gt 0 ] || [ $branch_local_chapi_count -gt 0 ] || [ $branch_remote_chapi_count -gt 0 ] || [ $branch_remote_mergeched_count -gt 0 ]; then
              echo "this repo is not release please check $folder"         
            fi
            cd $POSCHAPIN_HOME
        done
        ;;
      *)
        echo "WARNING: the command no exist"
        ;;
    esac
    ;;
  "here")
    case $2 in
      "check"|"-ck")
        branch_remote_chapi_count=$(git branch -r --list origin/CHAPI* | wc -l)
        branch_remote_mergeched_count=$(git branch -r --list origin/MERGECHED* | wc -l)
        branch_local_chapi_count=$(git branch --list CHAPI* | wc -l)
        branch_local_mergeched_count=$(git branch --list MERGECHED* | wc -l)
        if [ $branch_local_chapi_count -gt 0 ] || [ $branch_local_chapi_count -gt 0 ] || [ $branch_remote_chapi_count -gt 0 ] || [ $branch_remote_mergeched_count -gt 0 ]; then
          echo "this repo is not flow correct please check"         
        fi
        ;;
      *)
        echo "WARNING: the command no exist"
        ;;
    esac
    ;;
  *)
    echo "$1 command not recognized"
    ;;
esac